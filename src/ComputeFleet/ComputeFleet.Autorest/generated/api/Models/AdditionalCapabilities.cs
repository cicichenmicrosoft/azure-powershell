// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/powershell@4.0.722)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>AdditionalCapabilities for VM.</summary>
    public partial class AdditionalCapabilities :
        Sample.API.Models.IAdditionalCapabilities,
        Sample.API.Models.IAdditionalCapabilitiesInternal
    {

        /// <summary>Backing field for <see cref="HibernationEnabled" /> property.</summary>
        private bool? _hibernationEnabled;

        /// <summary>The flag that enables or disables hibernation capability on the VM.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public bool? HibernationEnabled { get => this._hibernationEnabled; set => this._hibernationEnabled = value; }

        /// <summary>Backing field for <see cref="UltraSsdEnabled" /> property.</summary>
        private bool? _ultraSsdEnabled;

        /// <summary>
        /// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account
        /// type on the VM or VMSS.
        /// Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only
        /// if this property is enabled.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public bool? UltraSsdEnabled { get => this._ultraSsdEnabled; set => this._ultraSsdEnabled = value; }

        /// <summary>Creates an new <see cref="AdditionalCapabilities" /> instance.</summary>
        public AdditionalCapabilities()
        {

        }
    }
    /// AdditionalCapabilities for VM.
    public partial interface IAdditionalCapabilities :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>The flag that enables or disables hibernation capability on the VM.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that enables or disables hibernation capability on the VM.",
        SerializedName = @"hibernationEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HibernationEnabled { get; set; }
        /// <summary>
        /// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account
        /// type on the VM or VMSS.
        /// Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only
        /// if this property is enabled.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS.
        Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.",
        SerializedName = @"ultraSSDEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UltraSsdEnabled { get; set; }

    }
    /// AdditionalCapabilities for VM.
    internal partial interface IAdditionalCapabilitiesInternal

    {
        /// <summary>The flag that enables or disables hibernation capability on the VM.</summary>
        bool? HibernationEnabled { get; set; }
        /// <summary>
        /// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account
        /// type on the VM or VMSS.
        /// Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only
        /// if this property is enabled.
        /// </summary>
        bool? UltraSsdEnabled { get; set; }

    }
}