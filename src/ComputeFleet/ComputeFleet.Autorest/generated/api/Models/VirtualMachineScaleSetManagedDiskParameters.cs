// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/powershell@4.0.722)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Describes the parameters of a ScaleSet managed disk.</summary>
    public partial class VirtualMachineScaleSetManagedDiskParameters :
        Sample.API.Models.IVirtualMachineScaleSetManagedDiskParameters,
        Sample.API.Models.IVirtualMachineScaleSetManagedDiskParametersInternal
    {

        /// <summary>Backing field for <see cref="DiskEncryptionSet" /> property.</summary>
        private Sample.API.Models.IDiskEncryptionSetParameters _diskEncryptionSet;

        /// <summary>
        /// Specifies the customer managed disk encryption set resource id for the managed
        /// disk.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.IDiskEncryptionSetParameters DiskEncryptionSet { get => (this._diskEncryptionSet = this._diskEncryptionSet ?? new Sample.API.Models.DiskEncryptionSetParameters()); set => this._diskEncryptionSet = value; }

        /// <summary>Resource Id</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string Id { get => ((Sample.API.Models.IDiskEncryptionSetParametersInternal)DiskEncryptionSet).Id; set => ((Sample.API.Models.IDiskEncryptionSetParametersInternal)DiskEncryptionSet).Id = value ?? null; }

        /// <summary>Internal Acessors for DiskEncryptionSet</summary>
        Sample.API.Models.IDiskEncryptionSetParameters Sample.API.Models.IVirtualMachineScaleSetManagedDiskParametersInternal.DiskEncryptionSet { get => (this._diskEncryptionSet = this._diskEncryptionSet ?? new Sample.API.Models.DiskEncryptionSetParameters()); set { {_diskEncryptionSet = value;} } }

        /// <summary>Internal Acessors for SecurityProfile</summary>
        Sample.API.Models.IVMDiskSecurityProfile Sample.API.Models.IVirtualMachineScaleSetManagedDiskParametersInternal.SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Sample.API.Models.VMDiskSecurityProfile()); set { {_securityProfile = value;} } }

        /// <summary>Internal Acessors for SecurityProfileDiskEncryptionSet</summary>
        Sample.API.Models.IDiskEncryptionSetParameters Sample.API.Models.IVirtualMachineScaleSetManagedDiskParametersInternal.SecurityProfileDiskEncryptionSet { get => ((Sample.API.Models.IVMDiskSecurityProfileInternal)SecurityProfile).DiskEncryptionSet; set => ((Sample.API.Models.IVMDiskSecurityProfileInternal)SecurityProfile).DiskEncryptionSet = value; }

        /// <summary>Backing field for <see cref="SecurityProfile" /> property.</summary>
        private Sample.API.Models.IVMDiskSecurityProfile _securityProfile;

        /// <summary>Specifies the security profile for the managed disk.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.IVMDiskSecurityProfile SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Sample.API.Models.VMDiskSecurityProfile()); set => this._securityProfile = value; }

        /// <summary>Resource Id</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string SecurityProfileDiskEncryptionSetId { get => ((Sample.API.Models.IVMDiskSecurityProfileInternal)SecurityProfile).DiskEncryptionSetId; set => ((Sample.API.Models.IVMDiskSecurityProfileInternal)SecurityProfile).DiskEncryptionSetId = value ?? null; }

        /// <summary>
        /// Specifies the EncryptionType of the managed disk. It is set to
        /// DiskWithVMGuestState for encryption of the managed disk along with VMGuestState
        /// blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and
        /// NonPersistedTPM for not persisting firmware state in the VMGuestState blob..
        /// **Note:** It can be set for only Confidential VMs.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string SecurityProfileSecurityEncryptionType { get => ((Sample.API.Models.IVMDiskSecurityProfileInternal)SecurityProfile).SecurityEncryptionType; set => ((Sample.API.Models.IVMDiskSecurityProfileInternal)SecurityProfile).SecurityEncryptionType = value ?? null; }

        /// <summary>Backing field for <see cref="StorageAccountType" /> property.</summary>
        private string _storageAccountType;

        /// <summary>
        /// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can
        /// only be used with data disks, it cannot be used with OS Disk.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string StorageAccountType { get => this._storageAccountType; set => this._storageAccountType = value; }

        /// <summary>
        /// Creates an new <see cref="VirtualMachineScaleSetManagedDiskParameters" /> instance.
        /// </summary>
        public VirtualMachineScaleSetManagedDiskParameters()
        {

        }
    }
    /// Describes the parameters of a ScaleSet managed disk.
    public partial interface IVirtualMachineScaleSetManagedDiskParameters :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>Resource Id</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource Id",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Resource Id</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource Id",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SecurityProfileDiskEncryptionSetId { get; set; }
        /// <summary>
        /// Specifies the EncryptionType of the managed disk. It is set to
        /// DiskWithVMGuestState for encryption of the managed disk along with VMGuestState
        /// blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and
        /// NonPersistedTPM for not persisting firmware state in the VMGuestState blob..
        /// **Note:** It can be set for only Confidential VMs.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the EncryptionType of the managed disk. It is set to
        DiskWithVMGuestState for encryption of the managed disk along with VMGuestState
        blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and
        NonPersistedTPM for not persisting firmware state in the VMGuestState blob..
        **Note:** It can be set for only Confidential VMs.",
        SerializedName = @"securityEncryptionType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("VMGuestStateOnly", "DiskWithVMGuestState", "NonPersistedTPM")]
        string SecurityProfileSecurityEncryptionType { get; set; }
        /// <summary>
        /// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can
        /// only be used with data disks, it cannot be used with OS Disk.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can
        only be used with data disks, it cannot be used with OS Disk.",
        SerializedName = @"storageAccountType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS", "StandardSSD_ZRS", "PremiumV2_LRS")]
        string StorageAccountType { get; set; }

    }
    /// Describes the parameters of a ScaleSet managed disk.
    internal partial interface IVirtualMachineScaleSetManagedDiskParametersInternal

    {
        /// <summary>
        /// Specifies the customer managed disk encryption set resource id for the managed
        /// disk.
        /// </summary>
        Sample.API.Models.IDiskEncryptionSetParameters DiskEncryptionSet { get; set; }
        /// <summary>Resource Id</summary>
        string Id { get; set; }
        /// <summary>Specifies the security profile for the managed disk.</summary>
        Sample.API.Models.IVMDiskSecurityProfile SecurityProfile { get; set; }
        /// <summary>
        /// Specifies the customer managed disk encryption set resource id for the managed
        /// disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and
        /// VMGuest blob.
        /// </summary>
        Sample.API.Models.IDiskEncryptionSetParameters SecurityProfileDiskEncryptionSet { get; set; }
        /// <summary>Resource Id</summary>
        string SecurityProfileDiskEncryptionSetId { get; set; }
        /// <summary>
        /// Specifies the EncryptionType of the managed disk. It is set to
        /// DiskWithVMGuestState for encryption of the managed disk along with VMGuestState
        /// blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and
        /// NonPersistedTPM for not persisting firmware state in the VMGuestState blob..
        /// **Note:** It can be set for only Confidential VMs.
        /// </summary>
        [global::Sample.API.PSArgumentCompleterAttribute("VMGuestStateOnly", "DiskWithVMGuestState", "NonPersistedTPM")]
        string SecurityProfileSecurityEncryptionType { get; set; }
        /// <summary>
        /// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can
        /// only be used with data disks, it cannot be used with OS Disk.
        /// </summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS", "StandardSSD_ZRS", "PremiumV2_LRS")]
        string StorageAccountType { get; set; }

    }
}