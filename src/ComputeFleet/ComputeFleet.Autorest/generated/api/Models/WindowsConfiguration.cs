// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/powershell@4.0.722)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Specifies Windows operating system settings on the virtual machine.</summary>
    public partial class WindowsConfiguration :
        Sample.API.Models.IWindowsConfiguration,
        Sample.API.Models.IWindowsConfigurationInternal
    {

        /// <summary>Backing field for <see cref="AdditionalUnattendContent" /> property.</summary>
        private System.Collections.Generic.List<Sample.API.Models.IAdditionalUnattendContent> _additionalUnattendContent;

        /// <summary>
        /// Specifies additional base-64 encoded XML formatted information that can be
        /// included in the Unattend.xml file, which is used by Windows Setup.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Sample.API.Models.IAdditionalUnattendContent> AdditionalUnattendContent { get => this._additionalUnattendContent; set => this._additionalUnattendContent = value; }

        /// <summary>Enables customer to schedule patching without accidental upgrades</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? AutomaticByPlatformSettingBypassPlatformSafetyChecksOnUserSchedule { get => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AutomaticByPlatformSettingBypassPlatformSafetyChecksOnUserSchedule; set => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AutomaticByPlatformSettingBypassPlatformSafetyChecksOnUserSchedule = value ?? default(bool); }

        /// <summary>
        /// Specifies the reboot setting for all AutomaticByPlatform patch installation
        /// operations.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string AutomaticByPlatformSettingRebootSetting { get => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AutomaticByPlatformSettingRebootSetting; set => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AutomaticByPlatformSettingRebootSetting = value ?? null; }

        /// <summary>Backing field for <see cref="EnableAutomaticUpdates" /> property.</summary>
        private bool? _enableAutomaticUpdates;

        /// <summary>
        /// Indicates whether Automatic Updates is enabled for the Windows virtual machine.
        /// Default value is true. For virtual machine scale sets, this property can be
        /// updated and updates will take effect on OS reprovisioning.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public bool? EnableAutomaticUpdates { get => this._enableAutomaticUpdates; set => this._enableAutomaticUpdates = value; }

        /// <summary>Backing field for <see cref="EnableVMAgentPlatformUpdates" /> property.</summary>
        private bool? _enableVMAgentPlatformUpdates;

        /// <summary>
        /// Indicates whether VMAgent Platform Updates is enabled for the Windows virtual
        /// machine. Default value is false.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public bool? EnableVMAgentPlatformUpdates { get => this._enableVMAgentPlatformUpdates; set => this._enableVMAgentPlatformUpdates = value; }

        /// <summary>
        /// Specifies the mode of VM Guest patch assessment for the IaaS virtual
        /// machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You
        /// control the timing of patch assessments on a virtual machine.<br /><br />
        /// **AutomaticByPlatform** - The platform will trigger periodic patch assessments.
        /// The property provisionVMAgent must be true.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string PatchSettingAssessmentMode { get => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AssessmentMode; set => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AssessmentMode = value ?? null; }

        /// <summary>
        /// Enables customers to patch their Azure VMs without requiring a reboot. For
        /// enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode'
        /// must be set to 'AutomaticByPlatform'.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? PatchSettingEnableHotpatching { get => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).EnableHotpatching; set => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).EnableHotpatching = value ?? default(bool); }

        /// <summary>
        /// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual
        /// machines associated to virtual machine scale set with OrchestrationMode as
        /// Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You
        /// control the application of patches to a virtual machine. You do this by
        /// applying patches manually inside the VM. In this mode, automatic updates are
        /// disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
        /// false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be
        /// updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates
        /// must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will
        /// automatically updated by the platform. The properties provisionVMAgent and
        /// WindowsConfiguration.enableAutomaticUpdates must be true
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string PatchSettingPatchMode { get => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).PatchMode; set => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).PatchMode = value ?? null; }

        /// <summary>Backing field for <see cref="PatchSettings" /> property.</summary>
        private Sample.API.Models.IPatchSettings _patchSettings;

        /// <summary>[Preview Feature] Specifies settings related to VM Guest Patching on Windows.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.IPatchSettings PatchSettings { get => (this._patchSettings = this._patchSettings ?? new Sample.API.Models.PatchSettings()); set => this._patchSettings = value; }

        /// <summary>Backing field for <see cref="ProvisionVMAgent" /> property.</summary>
        private bool? _provisionVMAgent;

        /// <summary>
        /// Indicates whether virtual machine agent should be provisioned on the virtual
        /// machine. When this property is not specified in the request body, it is set to
        /// true by default. This will ensure that VM Agent is installed on the VM so that
        /// extensions can be added to the VM later.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public bool? ProvisionVMAgent { get => this._provisionVMAgent; set => this._provisionVMAgent = value; }

        /// <summary>Internal Acessors for PatchSettingAutomaticByPlatformSettings</summary>
        Sample.API.Models.IWindowsVMGuestPatchAutomaticByPlatformSettings Sample.API.Models.IWindowsConfigurationInternal.PatchSettingAutomaticByPlatformSettings { get => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AutomaticByPlatformSettings; set => ((Sample.API.Models.IPatchSettingsInternal)PatchSettings).AutomaticByPlatformSettings = value; }

        /// <summary>Internal Acessors for PatchSettings</summary>
        Sample.API.Models.IPatchSettings Sample.API.Models.IWindowsConfigurationInternal.PatchSettings { get => (this._patchSettings = this._patchSettings ?? new Sample.API.Models.PatchSettings()); set { {_patchSettings = value;} } }

        /// <summary>Internal Acessors for WinRm</summary>
        Sample.API.Models.IWinRmConfiguration Sample.API.Models.IWindowsConfigurationInternal.WinRm { get => (this._winRm = this._winRm ?? new Sample.API.Models.WinRmConfiguration()); set { {_winRm = value;} } }

        /// <summary>Backing field for <see cref="TimeZone" /> property.</summary>
        private string _timeZone;

        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time".
        /// Possible values can be
        /// [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
        /// value from time zones returned by
        /// [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string TimeZone { get => this._timeZone; set => this._timeZone = value; }

        /// <summary>Backing field for <see cref="WinRm" /> property.</summary>
        private Sample.API.Models.IWinRmConfiguration _winRm;

        /// <summary>
        /// Specifies the Windows Remote Management listeners. This enables remote Windows
        /// PowerShell.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.IWinRmConfiguration WinRm { get => (this._winRm = this._winRm ?? new Sample.API.Models.WinRmConfiguration()); set => this._winRm = value; }

        /// <summary>The list of Windows Remote Management listeners</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Sample.API.Models.IWinRmListener> WinRmListeners { get => ((Sample.API.Models.IWinRmConfigurationInternal)WinRm).Listeners; set => ((Sample.API.Models.IWinRmConfigurationInternal)WinRm).Listeners = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="WindowsConfiguration" /> instance.</summary>
        public WindowsConfiguration()
        {

        }
    }
    /// Specifies Windows operating system settings on the virtual machine.
    public partial interface IWindowsConfiguration :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specifies additional base-64 encoded XML formatted information that can be
        /// included in the Unattend.xml file, which is used by Windows Setup.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies additional base-64 encoded XML formatted information that can be
        included in the Unattend.xml file, which is used by Windows Setup.",
        SerializedName = @"additionalUnattendContent",
        PossibleTypes = new [] { typeof(Sample.API.Models.IAdditionalUnattendContent) })]
        System.Collections.Generic.List<Sample.API.Models.IAdditionalUnattendContent> AdditionalUnattendContent { get; set; }
        /// <summary>Enables customer to schedule patching without accidental upgrades</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enables customer to schedule patching without accidental upgrades",
        SerializedName = @"bypassPlatformSafetyChecksOnUserSchedule",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutomaticByPlatformSettingBypassPlatformSafetyChecksOnUserSchedule { get; set; }
        /// <summary>
        /// Specifies the reboot setting for all AutomaticByPlatform patch installation
        /// operations.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the reboot setting for all AutomaticByPlatform patch installation
        operations.",
        SerializedName = @"rebootSetting",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Unknown", "IfRequired", "Never", "Always")]
        string AutomaticByPlatformSettingRebootSetting { get; set; }
        /// <summary>
        /// Indicates whether Automatic Updates is enabled for the Windows virtual machine.
        /// Default value is true. For virtual machine scale sets, this property can be
        /// updated and updates will take effect on OS reprovisioning.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether Automatic Updates is enabled for the Windows virtual machine.
        Default value is true. For virtual machine scale sets, this property can be
        updated and updates will take effect on OS reprovisioning.",
        SerializedName = @"enableAutomaticUpdates",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAutomaticUpdates { get; set; }
        /// <summary>
        /// Indicates whether VMAgent Platform Updates is enabled for the Windows virtual
        /// machine. Default value is false.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether VMAgent Platform Updates is enabled for the Windows virtual
        machine. Default value is false.",
        SerializedName = @"enableVMAgentPlatformUpdates",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableVMAgentPlatformUpdates { get; set; }
        /// <summary>
        /// Specifies the mode of VM Guest patch assessment for the IaaS virtual
        /// machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You
        /// control the timing of patch assessments on a virtual machine.<br /><br />
        /// **AutomaticByPlatform** - The platform will trigger periodic patch assessments.
        /// The property provisionVMAgent must be true.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the mode of VM Guest patch assessment for the IaaS virtual
        machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You
        control the timing of patch assessments on a virtual machine.<br /><br />
        **AutomaticByPlatform** - The platform will trigger periodic patch assessments.
        The property provisionVMAgent must be true.",
        SerializedName = @"assessmentMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("ImageDefault", "AutomaticByPlatform")]
        string PatchSettingAssessmentMode { get; set; }
        /// <summary>
        /// Enables customers to patch their Azure VMs without requiring a reboot. For
        /// enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode'
        /// must be set to 'AutomaticByPlatform'.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enables customers to patch their Azure VMs without requiring a reboot. For
        enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode'
        must be set to 'AutomaticByPlatform'.",
        SerializedName = @"enableHotpatching",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PatchSettingEnableHotpatching { get; set; }
        /// <summary>
        /// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual
        /// machines associated to virtual machine scale set with OrchestrationMode as
        /// Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You
        /// control the application of patches to a virtual machine. You do this by
        /// applying patches manually inside the VM. In this mode, automatic updates are
        /// disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
        /// false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be
        /// updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates
        /// must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will
        /// automatically updated by the platform. The properties provisionVMAgent and
        /// WindowsConfiguration.enableAutomaticUpdates must be true
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual
        machines associated to virtual machine scale set with OrchestrationMode as
        Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You
        control the application of patches to a virtual machine. You do this by
        applying patches manually inside the VM. In this mode, automatic updates are
        disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
        false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be
        updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates
        must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will
        automatically updated by the platform. The properties provisionVMAgent and
        WindowsConfiguration.enableAutomaticUpdates must be true",
        SerializedName = @"patchMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Manual", "AutomaticByOS", "AutomaticByPlatform")]
        string PatchSettingPatchMode { get; set; }
        /// <summary>
        /// Indicates whether virtual machine agent should be provisioned on the virtual
        /// machine. When this property is not specified in the request body, it is set to
        /// true by default. This will ensure that VM Agent is installed on the VM so that
        /// extensions can be added to the VM later.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether virtual machine agent should be provisioned on the virtual
        machine. When this property is not specified in the request body, it is set to
        true by default. This will ensure that VM Agent is installed on the VM so that
        extensions can be added to the VM later.",
        SerializedName = @"provisionVMAgent",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ProvisionVMAgent { get; set; }
        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time".
        /// Possible values can be
        /// [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
        /// value from time zones returned by
        /// [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the time zone of the virtual machine. e.g. ""Pacific Standard Time"".
        Possible values can be
        [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
        value from time zones returned by
        [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        string TimeZone { get; set; }
        /// <summary>The list of Windows Remote Management listeners</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of Windows Remote Management listeners",
        SerializedName = @"listeners",
        PossibleTypes = new [] { typeof(Sample.API.Models.IWinRmListener) })]
        System.Collections.Generic.List<Sample.API.Models.IWinRmListener> WinRmListeners { get; set; }

    }
    /// Specifies Windows operating system settings on the virtual machine.
    internal partial interface IWindowsConfigurationInternal

    {
        /// <summary>
        /// Specifies additional base-64 encoded XML formatted information that can be
        /// included in the Unattend.xml file, which is used by Windows Setup.
        /// </summary>
        System.Collections.Generic.List<Sample.API.Models.IAdditionalUnattendContent> AdditionalUnattendContent { get; set; }
        /// <summary>Enables customer to schedule patching without accidental upgrades</summary>
        bool? AutomaticByPlatformSettingBypassPlatformSafetyChecksOnUserSchedule { get; set; }
        /// <summary>
        /// Specifies the reboot setting for all AutomaticByPlatform patch installation
        /// operations.
        /// </summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Unknown", "IfRequired", "Never", "Always")]
        string AutomaticByPlatformSettingRebootSetting { get; set; }
        /// <summary>
        /// Indicates whether Automatic Updates is enabled for the Windows virtual machine.
        /// Default value is true. For virtual machine scale sets, this property can be
        /// updated and updates will take effect on OS reprovisioning.
        /// </summary>
        bool? EnableAutomaticUpdates { get; set; }
        /// <summary>
        /// Indicates whether VMAgent Platform Updates is enabled for the Windows virtual
        /// machine. Default value is false.
        /// </summary>
        bool? EnableVMAgentPlatformUpdates { get; set; }
        /// <summary>
        /// Specifies the mode of VM Guest patch assessment for the IaaS virtual
        /// machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You
        /// control the timing of patch assessments on a virtual machine.<br /><br />
        /// **AutomaticByPlatform** - The platform will trigger periodic patch assessments.
        /// The property provisionVMAgent must be true.
        /// </summary>
        [global::Sample.API.PSArgumentCompleterAttribute("ImageDefault", "AutomaticByPlatform")]
        string PatchSettingAssessmentMode { get; set; }
        /// <summary>
        /// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest
        /// Patching on Windows.
        /// </summary>
        Sample.API.Models.IWindowsVMGuestPatchAutomaticByPlatformSettings PatchSettingAutomaticByPlatformSettings { get; set; }
        /// <summary>
        /// Enables customers to patch their Azure VMs without requiring a reboot. For
        /// enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode'
        /// must be set to 'AutomaticByPlatform'.
        /// </summary>
        bool? PatchSettingEnableHotpatching { get; set; }
        /// <summary>
        /// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual
        /// machines associated to virtual machine scale set with OrchestrationMode as
        /// Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You
        /// control the application of patches to a virtual machine. You do this by
        /// applying patches manually inside the VM. In this mode, automatic updates are
        /// disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
        /// false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be
        /// updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates
        /// must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will
        /// automatically updated by the platform. The properties provisionVMAgent and
        /// WindowsConfiguration.enableAutomaticUpdates must be true
        /// </summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Manual", "AutomaticByOS", "AutomaticByPlatform")]
        string PatchSettingPatchMode { get; set; }
        /// <summary>[Preview Feature] Specifies settings related to VM Guest Patching on Windows.</summary>
        Sample.API.Models.IPatchSettings PatchSettings { get; set; }
        /// <summary>
        /// Indicates whether virtual machine agent should be provisioned on the virtual
        /// machine. When this property is not specified in the request body, it is set to
        /// true by default. This will ensure that VM Agent is installed on the VM so that
        /// extensions can be added to the VM later.
        /// </summary>
        bool? ProvisionVMAgent { get; set; }
        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time".
        /// Possible values can be
        /// [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
        /// value from time zones returned by
        /// [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
        /// </summary>
        string TimeZone { get; set; }
        /// <summary>
        /// Specifies the Windows Remote Management listeners. This enables remote Windows
        /// PowerShell.
        /// </summary>
        Sample.API.Models.IWinRmConfiguration WinRm { get; set; }
        /// <summary>The list of Windows Remote Management listeners</summary>
        System.Collections.Generic.List<Sample.API.Models.IWinRmListener> WinRmListeners { get; set; }

    }
}